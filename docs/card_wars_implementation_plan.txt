GAMEPLAY
- ~~player object~~
- ~~turn structure: main phase, battle phase, pass turn~~
- ~~basic card object~~
- ~~deck, discard pile, hand collections~~
- ~~deck mechanics: shuffle, draw(int), mill(int), discard(int)~~
- ~~basic triggers / effects (draw per turn)~~
- ~~basic game entity objects (creature, building, spell)~~
- ~~play card / self enters play trigger~~
- ~~action points / card cost~~
- ~~lanes, landscapes~~
- ~~decks.json~~
- ~~json-to-game-entity logic (asset manager)~~
- ~~refactor gameplay_manager and gameplay_classes~~
- ~~attack phase~~
- ~~skip first attack rule~~
- ~~create TriggerType enum, require it as param for Trigger init~~
- ~~figure out cw_lang integration~~
- ~~refactor convert existing trigger effects:~~
	- ~~per-turn draw~~
	- ~~gain/loss of actions~~
- ~~refactor game_logic: separate classes into own modules~~
- ~~implement basic Stat and IntStat and Modifier classes~~
- ~~implement placeholder quit and test options in Choice input loop~~
- ~~implement modifier application in cw_lang~~
- ~~implement conditions (add them as optional params in effect constructor)~~
- ~~create Target parent class (children: Choice, Random, Filter)~~
    - ~~replace Choice type checks with Target type checks~~
- ~~create basic logger logic (including log.txt file)~~
- ~~implement logging system in game_manager (remember to log.init())~~
- ~~implement await_input~~

- refactor action handling (main phase, inspect hand, inspect card -> lot of boilerplate)
- inspect Hand -> Inspect Card (with action labels for abilities, floop, play...)
- implement inspect lanes (with TAB to toggle between players)
- implement floop
- network message format and processing (local and peer)
- implement check_card_specific_requirements


#################

print card:

[name] (owner if different from player) - [current type (actual type, if different)]
Cost: [cost] (current AP: [AP])
----------------------------------------------------
[text]
----------------------------------------------------
ATK: [atk]				  DEF: [def]

===================================================
[available options, e.g. play or floop]
[back]
