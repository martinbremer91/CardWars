GAMEPLAY
- ~~player object~~
- ~~turn structure: main phase, battle phase, pass turn~~
- ~~basic card object~~
- ~~deck, discard pile, hand collections~~
- ~~deck mechanics: shuffle, draw(int), mill(int), discard(int)~~
- ~~basic triggers / effects (draw per turn)~~
- ~~basic game entity objects (creature, building, spell)~~
- ~~play card / self enters play trigger~~
- ~~action points / card cost~~
- ~~lanes, landscapes~~
- ~~decks.json~~
- ~~json-to-game-entity logic (asset manager)~~
- ~~refactor gameplay_manager and gameplay_classes~~
- ~~attack phase~~
- ~~skip first attack rule~~
- ~~create TriggerType enum, require it as param for Trigger init~~
- ~~figure out cw_lang integration~~
- ~~refactor convert existing trigger effects:~~
	- ~~per-turn draw~~
	- ~~gain/loss of actions~~
- ~~refactor game_logic: separate classes into own modules~~
- ~~implement basic Stat and IntStat and Modifier classes~~
- ~~implement placeholder quit and test options in Choice input loop~~

- implement modifier application in cw_lang
- implement conditions
- implement proper main phase (with choices of what to do, incl. flooping)
- implement floop
- network message format and processing (local and peer)
- implement check_card_specific_requirements


NOTES:
- cw_lang: "-1" doesn't register as a digit -> but can be cast as int no problem
- can trigger conditions and effect filters use the same logic?
